$CREATE COMMENT
*******************************************************************************
 
Test Name:  	EXT_REL_0_8_E
Test Level:     0
Series Name:    EXT_LEV_0
Date:  		June 30, 1994
Author:  	Scott Van Voris
Bug: 
 
Description:    This is a Level 0 test which is designed to verify the 
		syntax to create an external relation with a fixed-length
		datatype is working properly.

                In order to verify the external relation was really 
                created, a tuple is inserted into the relation, and the 
                value in the relation retreived via a query.
 
Expected Output:        This is value:  Success   

History:
2-Oct-95:  Mark
  Removed the Cleanup / Setup comments from the test.
  Also, added WHERE_GDB and RUN drop_gdb to the tests.

3-Oct-95: Marco
  Added the WHERE_GDB_EXTERNAL, so the external file can be created 
  by the server in the correct place when accessing data remotely.
  Also, I removed any referance to DIR external.dat and TYPE external.dat
  which would also fail when running remotely.

4-Oct-95: Marco
  Renamed Fixed.e to FixedL.e, so that we no longer call DELETE fixed*, which also 
  deleted fixed.sed.


7-Oct-99: Linda Begley
  Added rm_file.sh so that external file external.dat can be removed remotely.

14-Oct-00: Frank Schlottmann-Goedde
  replaced double with single quotes where necessary to run with version 6.x

*******************************************************************************

$CREATE fixedl.e 
#include <stdio.h>
#include <stdlib.h>
 
EXEC SQL
    INCLUDE SQLCA
 
EXEC SQL
    WHENEVER SQLERROR GO TO ERR;
 
main()
{
 
EXEC SQL
   CREATE DATABASE 'WHERE_GDB:ext_rel.gdb';
 
EXEC SQL
   DECLARE ext_table TABLE
        (field1 CHARACTER(10)) ;

EXEC SQL
   CREATE TABLE ext_table EXTERNAL FILE 'WHERE_GDB_EXTERNAL:external.dat'
        (field1 CHARACTER(10)) ;
 
 
exit(0);
ERR:  printf ("Data base error, SQLCODE = %d\n", SQLCODE);
   isc_print_status (gds_$status);
 
    EXEC SQL
        ROLLBACK RELEASE;
 
    exit(1);
 
}
$CREATE query.e
#include <stdio.h>
#include <stdlib.h>
 
EXEC SQL
    INCLUDE SQLCA
 
EXEC SQL
    WHENEVER SQLERROR GO TO ERR;
 
EXEC SQL
    SET DATABASE DB = 'WHERE_GDB:ext_rel.gdb';
 
main()
{
EXEC SQL
   BEGIN DECLARE SECTION;
 
   BASED ON EXT_TABLE.FIELD1 value;
EXEC SQL
   END DECLARE SECTION;
 
EXEC SQL
   INSERT INTO ext_table (field1) VALUES ('Success');
 
EXEC SQL
   SELECT field1 INTO :value FROM EXT_TABLE;
 
printf ("This is value:  %s\n",value);
 
exit(0);
ERR:  printf ("Data base error, SQLCODE = %d\n", SQLCODE);
   isc_print_status (gds_$status);
 
    EXEC SQL
        ROLLBACK RELEASE;
 
    exit(1);
 
}

$CREATE rm_file.sh
machine=`uname -s`
node=`uname -n`
echo $WHERE_GDB_EXTERNAL > awk.tst

echo $WHERE_GDB > ls.out
proto=`cut -c 1,2 ls.out`

if [ $machine = "Windows_NT" ] || [ $machine = "Windows_95" ] || [ $machine = "Windows_98" ]
   then 
      if [ $WHERE_GDB = $WHERE_GDB_EXTERNAL ]
        then  
           rm -f WHERE_GDB_EXTERNAL:external.dat 
        else
           if [ $proto = "//" ]
              then
              machine_name=`awk -F"/" '{print $3}' ls.out`
              else
              machine_name=`awk -F":" '{print $1}' ls.out` 
           fi
           echo `awk -F":" '{print $1}' awk.tst` > awk.out
           server_testbed=`cat awk.out`
           ls_string=//$machine_name/$server_testbed/testbed/external.dat
           rm -f $ls_string 
      fi
else
      if [ $WHERE_GDB = $WHERE_GDB_EXTERNAL ]
        then  
           rm -f WHERE_GDB_EXTERNAL:external.dat 
        else
           if [ $proto = "//" ]
              then
              machine_name=`awk -F"/" '{print $3}' ls.out`
              else
              machine_name=`awk -F":" '{print $1}' ls.out` 
           fi
           rsh $machine_name /bin/rm -f WHERE_GDB_EXTERNAL:external.dat
      fi
fi

$GPRE fixedl.e
$CC FLAG_CC fixedl.c
$LINK FLAG_LINK fixedl
$RUN fixedl
$GPRE query.e
$CC FLAG_CC query.c
$LINK FLAG_LINK query
$RUN query
$DROP WHERE_GDB:ext_rel.gdb
$SH rm_file.sh
$DELETE COMMENT fixedl* rm_file.sh query* 
